---
# roles/certbot/tasks/main.yml

# EPEL Repository is needed for snap packages for Rocky Linux
- name: Ensure EPEL repository is installed
  package:
    name: epel-release
    state: present
    use: dnf
  register: epel_install

# Install snapd
- name: Ensure snapd is installed
  package:
    name: snapd
    state: present
    use: dnf
  register: snapd_install

- name: Ensure snapd is enabled
  systemd:
    name: snapd.socket
    enabled: true
    state: started

- name: Enable classic snap support
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link
  when: ansible_os_family != "Debian"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Update snap after install
  shell: snap install core; snap refresh core
  changed_when: true
  failed_when: false
  when: snapd_install is changed

# Install certbot via snapd
- name: Install certbot via snap
  snap:
    name: certbot
    classic: true
    state: "present"
  environment:
    SNAP_DEBUG: "1"
  ignore_errors: "{{ ansible_check_mode }}"
  register: snap_result
  until: snap_result is succeeded
  retries: 3
  delay: 10

- name: Symlink certbot into place.
  file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link
  ignore_errors: "{{ ansible_check_mode }}"

- name: Set Certbot script variable.
  set_fact:
    certbot_script: /usr/bin/certbot

- name: Certbot | Upload cli.ini
  template:
    src: cli.ini.j2
    dest: /etc/letsencrypt/cli.ini

# Check if Certificate already exists
- name: Check if certificate already exists.
  stat:
    path: "/etc/letsencrypt/live/{{ certificate_name }}/cert.pem"
  register: letsencrypt_cert

# Generate new certificate if one does not exist
- name: Load encrypted variables
  include_vars: encrypted_vars.yml

- name: Generate new certificate if one does not exist
  command: "{{ certbot_create_command }}"
  when: not letsencrypt_cert.stat.exists
  ignore_errors: "{{ ansible_check_mode }}"

- name: Change permissions on key file group
  file:
    path: "/etc/letsencrypt/live/{{ certificate_name }}/privkey.pem"
    owner: root
    group: "{{ certbot_group }}"
    mode: u=rw,g=r,o=
  ignore_errors: "{{ ansible_check_mode }}"
  
  
# Cron job for auto-renewal?
- name: Create Cron job for Auto-Renewal of Certificate
  template:
    src: etc-cron.daily-certbot.sh.j2
    dest: /etc/cron.daily/certbot.sh
    mode: "u=rwx,g=rw,o=r" 
  tags: foo2
